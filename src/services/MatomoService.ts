import { Router } from 'vue-router';

export default class MatomoService {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  static getConfig(router: Router): any {
    return {
      // Configure your matomo server and site by providing
      host: 'https://yeswedev.matomo.cloud',
      siteId: 1,

      // Changes the default .js and .php endpoint's filename
      // Default: 'matomo'
      trackerFileName: 'matomo',

      // Overrides the autogenerated tracker endpoint entirely
      // Default: undefined
      trackerUrl: null,

      // Overrides the autogenerated tracker script path entirely
      // Default: undefined
      trackerScriptUrl: null,

      // Enables automatically registering pageviews on the router
      router,

      // Enables link tracking on regular links. Note that this won't
      // work for routing links (ie. internal Vue router links)
      // Default: true
      enableLinkTracking: true,

      // Require consent before sending tracking information to matomo
      // Default: false
      requireConsent: true,

      // Whether to track the initial page view
      // Default: true
      trackInitialView: true,

      // Run Matomo without cookies
      // Default: false
      disableCookies: false,

      // Require consent before creating matomo session cookie
      // Default: false
      requireCookieConsent: true,

      // Enable the heartbeat timer (https://developer.matomo.org/guides/tracking-javascript-guide#accurately-measure-the-time-spent-on-each-page)
      // Default: false
      enableHeartBeatTimer: true,

      // Set the heartbeat timer interval
      // Default: 15
      heartBeatTimerInterval: 15,

      // Whether or not to log debug information
      // Default: false
      debug: false,

      // UserID passed to Matomo (see https://developer.matomo.org/guides/tracking-javascript-guide#user-id)
      // Default: undefined
      userId: undefined,

      // Share the tracking cookie across subdomains (see https://developer.matomo.org/guides/tracking-javascript-guide#measuring-domains-andor-sub-domains)
      // Default: undefined, example '*.example.com'
      cookieDomain: undefined,

      // Tell Matomo the website domain so that clicks on these domains are not tracked as 'Outlinks'
      // Default: undefined, example: '*.example.com'
      domains: undefined,

      // A list of pre-initialization actions that run before matomo is loaded
      // Default: []
      // Example: [
      //   ['API_method_name', parameter_list],
      //   ['setCustomVariable','1','VisitorType','Member'],
      //   ['appendToTrackingUrl', 'new_visit=1'],
      //   etc.
      // ]
      preInitActions: [],

      // A function to determine whether to track an interaction as a site search
      // instead of as a page view. If not a function, all interactions will be
      // tracked as page views. Receives the new route as an argument, and
      // returns either an object of keyword, category (optional) and resultsCount
      // (optional) to track as a site search, or a falsey value to track as a page
      // view.
      // Default: false, i.e. track all interactions as page views
      // Example: (to) => {
      //   if (to.query.q && to.name === 'search') {
      //     return { keyword: to.query.q, category: to.params.category }
      //   } else {
      //    return null
      //   }
      // }
      trackSiteSearch: false,
    };
  }

  // Called after consent given
  static forgetUserOptOut = () => {
    window._paq.push(['forgetUserOptOut']);
  }

  // Called after consent given
  static setConsentGiven = () => {
    window._paq.push(['setConsentGiven']);
  }

  // Called after consent given
  static setCookieConsentGiven = () => {
    window._paq.push(['setCookieConsentGiven']);
  }

  // Called after consent given
  static rememberConsentGiven = () => {
    window._paq.push(['rememberConsentGiven']);
  }

  // Called after consent removed
  static forgetConsentGiven = () => {
    window._paq.push(['forgetConsentGiven']);
  }

  // Called after consent removed
  static forgetCookieConsentGiven = () => {
    window._paq.push(['forgetCookieConsentGiven']);
  }

  // Called after consent removed
  static optUserOut = () => {
    window._paq.push(['optUserOut']);
  }

  // Called after user logged in
  static setUserId = (userId: string) => {
    window._paq.push(['setUserId', userId]);
  }

  // Called after user logged out
  static resetUserId = () => {
    window._paq.push(['resetUserId']);
  }

  static setEmailVariable = (email: string) => {
    window._paq.push(['setCustomDimension',
      1,
      email,
    ]);
  }

  static setUsernameVariable = (username: string) => {
    window._paq.push([
      'setCustomDimension',
      2,
      username,
    ]);
  }

  // Demo method
  static eventProjectClicked = (projectName: string, actionsBeforeCount: number) => {
    window._paq.push(['trackEvent', 'Project Clicked', 'Project Name', `${projectName}`]);
    window._paq.push(['trackEvent', 'Project Clicked', 'Actions Before Count', `${actionsBeforeCount}`]);
  }
}
